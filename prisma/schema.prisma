generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Auth {
  id         Int      @id @default(autoincrement())
  email      String   @unique(map: "Auth_email_key")
  password   String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  userId     Int?     @unique(map: "Auth_userId_key") @map("user_id")
  isVerified Boolean? @default(false) @map("is_verified")
  role       Role?    @default(CUSTOMER)
  user       User?    @relation(fields: [userId], references: [id], map: "Auth_userId_fkey")

  @@map("auths")
}

model User {
  id                 Int                @id @default(autoincrement())
  firstName          String?            @map("first_name")
  lastName           String?            @map("last_name")
  displayName        String?            @map("display_name")
  birthdate          String?
  deliveryAddress    String?            @map("delivery_address")
  phoneNumber        String?            @map("phone_number")
  createdAt          DateTime           @default(now()) @map("created_at")
  profileImage       String?            @map("profile_image")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  auth               Auth?
  RefreshToken       RefreshToken[]
  ResetPasswordToken VerifyResetToken[]

  @@map("users")
}

model RefreshToken {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  refreshToken String   @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model VerifyResetToken {
  id        Int       @id @default(autoincrement())
  userId    Int?      @map("user_id")
  token     String
  tokenType TokenType @map("token_type")
  expiredAt DateTime  @map("expired_at")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  user      User?     @relation(fields: [userId], references: [id])

  @@map("verify_reset_tokens")
}

model Products {
  id                         Int            @id @default(autoincrement())
  name                       String
  price                      Int
  description                String
  productImage               String         @map("product_image")
  deliveryMethod             DeliveryMethod @map("delivery_method")
  type                       ProductType
  stock                      Int
  deliveryAvailableTimeStart String         @map("delivery_available_time_start")
  deliveryAvailableTimeEnd   String         @map("delivery_available_time_end")
  createdAt                  DateTime?      @default(now()) @map("created_at")
  updatedAt                  DateTime?      @updatedAt @map("updated_at")
  ProductSizes               ProductSizes[]

  @@map("products")
}

model ProductSizes {
  id        Int       @id @default(autoincrement())
  productId Int       @map("product_id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  sizeId    Int       @map("size_id")
  product   Products  @relation(fields: [productId], references: [id])
  size      Sizes     @relation(fields: [sizeId], references: [id])

  @@map("product_sizes")
}

model Sizes {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  slug         String         @unique
  createdAt    DateTime?      @default(now()) @map("created_at")
  updatedAt    DateTime?      @updatedAt @map("updated_at")
  ProductSizes ProductSizes[]

  @@map("sizes")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum TokenType {
  VERIFY
  RESET
}

enum DeliveryMethod {
  DELIVERY
  DINE_IN
  TAKEAWAY
}

enum ProductType {
  COFFEE
  NON_COFFEE
  FOODS
  ADD_ON
}
